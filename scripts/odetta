#!/usr/bin/env python

import argparse
import os
import shlex
import subprocess
import sys

from jinja2 import Environment, PackageLoader

import odetta
import odetta.jobs


env = Environment(loader=PackageLoader('odetta', 'templates'))

parser = argparse.ArgumentParser()
parser.add_argument('command', choices=['makefile', 'run'], help='TODO')
parser.add_argument('args', nargs=argparse.REMAINDER, help='TODO')

run_parser = argparse.ArgumentParser()
run_parser.add_argument('job', help='TODO')

mf_parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS)
mf_parser.add_argument('--name', default='Makefile')
mf_parser.add_argument('--type', default='paired')
mf_parser.add_argument('--genome-fasta')
mf_parser.add_argument('--genome-gff')
mf_parser.add_argument('--min-distance')
mf_parser.add_argument('--max-distance')
mf_parser.add_argument('--min-overlap')
mf_parser.add_argument('--min-exons')
mf_parser.add_argument('--min-mrna-length')
mf_parser.add_argument('--reads', nargs='+')
mf_parser.add_argument('--split-size')
mf_parser.add_argument('--ebwt-base')
mf_parser.add_argument('--supersplat')
mf_parser.add_argument('--gmb')
mf_parser.add_argument('--splat-min-intron')
mf_parser.add_argument('--splat-max-intron')
mf_parser.add_argument('--splat-min-read-chunk')
mf_parser.add_argument('--splat-max-index-chunk')

#TODO add job list to cli help
#TODO move this out to a module and unit test

if __name__ == '__main__':
    args = parser.parse_args()

    if args.command == 'run':
        run_args, job_args = run_parser.parse_known_args(args.args)

        if run_args.job in odetta.jobs.names:
            job_cls = odetta.jobs.names[run_args.job]
            subprocess.call(['python', job_cls.mr_job_script()] + job_args)
        else:
            sys.exit('Error: unknown job')
            #TODO would be useful to print job list here

    elif args.command == 'makefile':
        mf_args = mf_parser.parse_args(args.args)
        out = open(mf_args.name, 'w')

        if mf_args.type == 'paired':
            t = env.get_template('paired.jinja')
        else:
            t = env.get_template('single.jinja')

        out.write(t.render(**vars(mf_args)))

        print 'Created {}'.format(os.path.abspath(mf_args.name))
